@* @page "/listtodo"
@using HomeTaskOrganizer.Models
@using HomeTaskOrganizer.Services
@inject HomeTaskService HomeTaskService
@rendermode InteractiveServer

<h3>Tasks To Do</h3>

@if (hometasks != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>Deadline</th>
                <th>Assigned To</th>
                <th>Is Completed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hometask in hometasks)
            {
                <tr>
                    <td>@hometask.HomeTaskId</td>
                    <td>@hometask.Title</td>
                    <td>@hometask.Description</td>
                    <td>@hometask.Deadline.ToShortDateString()</td>
                    <td>@hometask.AssignedTo</td>
                    <td>@(hometask.IsCompleted ? "Yes" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No home tasks found.</p>
}

@code {
    IEnumerable<HomeTask> hometasks;

    protected override async Task OnInitializedAsync()
    {
        hometasks = await HomeTaskService.GetAllTasksAsync();
    }
}
 *@
@page "/listtodo"
@using HomeTaskOrganizer.Models
@using HomeTaskOrganizer.Services
@inject HomeTaskService HomeTaskService
@rendermode InteractiveServer

<h3>Tasks To Do</h3>

@if (tasksToDo != null && tasksToDo.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>Deadline</th>
                <th>Assigned To</th>
                <th>Is Completed</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasksToDo)
            {
                <tr>
                    <td>@task.HomeTaskId</td>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.Deadline.ToShortDateString()</td>
                    <td>@task.AssignedTo</td>
                    <td>@(task.IsCompleted ? "Yes" : "No")</td>
                    <td>
                        @if (!task.IsCompleted)
                        {
                            <button class="btn btn-primary" @onclick="() => CompleteTask(task)">Complete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No tasks to do.</p>
}

<h3>Tasks Archive</h3>

@if (tasksArchive != null && tasksArchive.Any())
{
    <table class="table">
        <!-- Content for Tasks Archive -->
    </table>
}
else
{
    <p>No tasks in the archive.</p>
}

@code {
    IEnumerable<HomeTask> tasksToDo;
    IEnumerable<HomeTask> tasksArchive;

    protected override async Task OnInitializedAsync()
    {
        var allTasks = await HomeTaskService.GetAllTasksAsync();
        tasksToDo = allTasks.Where(task => !task.IsCompleted);
        tasksArchive = allTasks.Where(task => task.IsCompleted);
    }

    private async Task CompleteTask(HomeTask task)
    {
        task.IsCompleted = true;
        task.CompletedDate = DateTime.UtcNow;

        await HomeTaskService.UpdateTaskAsync(task);
        tasksToDo = tasksToDo.Where(t => t.HomeTaskId != task.HomeTaskId).ToList();
        tasksArchive = tasksArchive.Append(task);
    }
}
